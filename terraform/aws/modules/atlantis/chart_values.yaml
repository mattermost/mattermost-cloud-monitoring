# Replace this with your own repo whitelist:
orgWhitelist: ""
# logLevel: "debug"

# If using GitLab, specify like the following:
# gitlab:
#   user: foo
#   token: bar
#   secret: baz
# GitLab Enterprise only:
#   hostname: gitlab.your.org
# (The chart will perform the base64 encoding for you for values that are stored in secrets.)


# When referencing Terraform modules in private repositories, it may be helpful
# (necessary?) to use redirection in a .gitconfig like so:
# gitconfig: |
  # [url "https://YOUR_GH_TOKEN@github.com"]
  #   insteadOf = https://github.com
  # [url "https://YOUR_GH_TOKEN@github.com"]
  #   insteadOf = ssh://git@github.com
  # [url "https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com"]
  #   insteadOf = https://gitlab.com
  # [url "https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com"]
  #   insteadOf = ssh://git@gitlab.com
# Source: https://stackoverflow.com/questions/42148841/github-clone-with-oauth-access-token

# To specify AWS credentials to be mapped to ~/.aws:
# aws:
#   credentials: |
#     [default]
#     aws_access_key_id=YOUR_ACCESS_KEY_ID
#     aws_secret_access_key=YOUR_SECRET_ACCESS_KEY
#     region=us-east-1
#   config: |
#     [profile a_role_to_assume]
#     role_arn = arn:aws:iam::123456789:role/service-role/roleToAssume
#     source_profile = default
# To reference an already existing Secret object with AWS credentials
# awsSecretName: 'mysecretwithawscreds'


## -------------------------- ##
# Default values for atlantis (override as needed).
## -------------------------- ##

# image:
#   repository: runatlantis/atlantis
#   tag: v0.11.1
#   pullPolicy: IfNotPresent

## Use Server Side Repo Config,
## ref: https://www.runatlantis.io/docs/server-side-repo-config.html
## Example default configuration
repoConfig: |
 ---
 repos:
 - id: /.*/
   apply_requirements: ["approved", "mergeable"]
   workflow: default
   allowed_overrides: []
   allow_custom_workflows: true
 workflows:
   default:
     plan:
       steps: [init, plan]
     apply:
       steps: [apply]

# allowForkPRs enables atlantis to run on a fork Pull Requests
allowForkPRs: false

## defaultTFVersion set the default terraform version to be used in atlantis server
# defaultTFVersion: 0.12.0

# disableApplyAll disables running `atlantis apply` without any flags
disableApplyAll: false

# We only need to check every 60s since Atlantis is not a high-throughput service.
livenessProbe:
  enabled: true
  periodSeconds: 60
  initialDelaySeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  scheme: HTTP
readinessProbe:
  enabled: true
  periodSeconds: 60
  initialDelaySeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
  scheme: HTTP

service:
  type: ClusterIP
  port: 8080

podTemplate:
  annotations: {}
  labels: {}

statefulSet:
  annotations: {}
  labels: {}

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx-internal
    kubernetes.io/ingress.provider: nginx
  path: /
  host: chart-example.local
  tls: []

resources:
  requests:
    memory: 1Gi
    cpu: 100m
  limits:
    memory: 1Gi
    cpu: 100m

# Disk space for Atlantis to check out repositories
dataStorage: 5Gi

replicaCount: 1

## test container details
test:
  enabled: true
  image: lachlanevenson/k8s-kubectl
  imageTag: v1.4.8-bash

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  annotations: {}

# tlsSecretName: tls

# Optionally specify additional environment variables to be populated from Kubernetes secrets.
# Useful for passing in TF_VAR_foo or other secret environment variables from Kubernetes secrets.
environmentSecrets: []
# environmentSecrets:
#   - name: THE_ENV_VAR
#     secretKeyRef:
#       name: the_k8s_secret_name
#       key: the_key_of_the_value_in_the_secret

# Optionally specify additional volumes for the pod.
extraVolumes: []
# extraVolumes:
#   - name: some-volume-name
#     emptyDir: {}

# Optionally specify additional volume mounts for the container.
extraVolumeMounts: []
# extraVolumeMounts:
#   - name: some-volume-name
#     mountPath: /path/in/container

extraManifests: []
# extraManifests:
#  - apiVersion: cloud.google.com/v1beta1
#    kind: BackendConfig
#    metadata:
#      name: "{{ .Release.Name }}-test"
#    spec:
#      securityPolicy:
#        name: "gcp-cloud-armor-policy-test"

